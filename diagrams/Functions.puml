@startuml
interface Visitable{
+accept(v: Visitor): void
}
interface Visitor{
+visit(f: VariableFunction): void
+visit(f: NonVariableFunction): void
+visit(p: Variable): void
+visit(p: Constant): void
+visit(bin: BinaryOperation): void
+visit(un: UnaryOperation): void
}

class Printer implements Visitor{
+visit(f: VariableFunction): void
+visit(f: NonVariableFunction): void
+visit(p: Variable): void
+visit(p: Constant): void
+visit(bin: BinaryOperation): void
+visit(un: UnaryOperation): void
}


interface Function extends Visitable{
+eval(): Double
+listVariables(): List<String>
}
class VariableFunction implements Function{
-variable: Parameter
-operation: Operation
+eval(): Double
+listVariables(): List<String>
+accept(v: Visitor): void
+getOperation(): Operation
}
class NonVariableFunction implements Function{
-operation: Operation
+eval(): Double
+listVariables(): List<String>
+accept(v: Visitor): void
+getOperation(): Operation
}

interface Parameter extends Visitable{
+getValue(): MathNumber
+setValue(value: MathNumber): void
}

class Variable implements Parameter{
-variableName: String
-value: MathNumber
+getValue(): MathNumber
+setValue(value: MathNumber): void
+getVariable(): String
}

class Constant implements Parameter{
-value: MathNumber
+getValue(): MathNumber
+setValue(value: MathNumber): void
+getValueString(): String
}

interface Operation extends Visitable, Parameter{
+solve(): Double
}

abstract class UnaryOperation implements Operation{
-parameter: Parameter
+solve(): Double
+accept(v: Visitor): void
+getValue(): MathNumber
+setValue(value: MathNumber): void
+getParameter(): Parameter
}

abstract class BinaryOperation implements Operation{
-first: Parameter
-second: Parameter
-operand: String
+solve(): Double
+accept(v: Visitor): void
+getValue(): MathNumber
+setValue(value: MathNumber): void
+getFirst(): Parameter
+getSecond(): Parameter
+getOperand(): String
}

class Addition extends BinaryOperation{
+solve(): Double
}
class Subtraction extends BinaryOperation{
+solve(): Double
}
class Product extends BinaryOperation{
+solve(): Double
}
class Division extends BinaryOperation{
+solve(): Double
}
class Power extends BinaryOperation{
+solve(): Double
}

class AbsoluteValue extends UnaryOperation{
+solve(): Double
+accept(v: Visitor): void
}
class SquareRoot extends UnaryOperation{
+solve(): Double
+accept(v: Visitor): void
}

class Number {
//Java built-in Number class
}

class MathNumber extends Number{
-value: Number
+toString(): String
+intValue(): int
+longValue(): long
+floatValue(): float
+doubleValue(): double
}



' Functions receive ONE WORD OR LETTER,
' then they are single-variable

' Extras
Visitable <-Visitor
Variable o-- MathNumber
Constant o-- MathNumber


@enduml